# -*- coding: utf-8 -*-
"""ipl cricket predict.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1B6pV8YVgQD8-TE0Tfb50ix6d3bqQq0Vj
"""

import numpy as np
import pandas as pd

from google.colab import files
upload=files.upload()

from google.colab import files
upgrade=files.upload()

df=pd.read_csv('IPL_Ball_by_Ball_2008_2022.csv')
df1 = pd.read_csv('IPL_Matches_2008_2022.csv')

df1

df1.info()

df2 = df1.drop(['Team1Players','Team2Players','Umpire1','Umpire2','Player_of_Match',
                'method','Margin','WonBy','SuperOver'], axis=1)
df2.head()

"""i am crating dataframe and finding sum columns is('id','Season','Date','MatchNumber','Venue','City','Team1','Team2', 'TossWinner','TossDecision','Innings_1','batting_team_innings_1','Bowling_Team_Innings_1','Total_Runs_Innings_1', 'Innings_2','batting_team_innings_2','Bowling_Team_Innings_2','Total_Runs_Innings_2', 'WinningTeam','losing_team')"""

total_score_df = df.groupby(['ID', 'innings'])['total_run'].sum().reset_index()
total_score_df

"""i am finding three column is id , innings and total_run"""

total_score_innings_1 = total_score_df[total_score_df['innings'] == 2]
total_score_innings_1

df4 = df[df['innings'] == 1].groupby('ID')['BattingTeam'].unique().reset_index(name='Bowling Team')
df4['Bowling Team'] = df4['Bowling Team'].apply(lambda x: x[0] if x else None)
df4.dropna(subset=['Bowling Team'], inplace=True)
total_score_innings_1 = total_score_innings_1.merge(df4[['ID','Bowling Team']], left_on = 'ID', right_on = 'ID')
total_score_innings_1

"""finding new columns is bowling team only innings is 2"""

total_score_innings_2 = total_score_df[total_score_df['innings'] == 1]
total_score_innings_2

df5 = df[df['innings'] == 2].groupby('ID')['BattingTeam'].unique().reset_index(name='Bowling Team')
df5['Bowling Team'] = df5['Bowling Team'].apply(lambda x: x[0] if x else None)
df5.dropna(subset=['Bowling Team'], inplace=True)
total_score_innings_2 = total_score_innings_2.merge(df5[['ID','Bowling Team']], left_on = 'ID', right_on = 'ID')
total_score_innings_2

"""finding new columns is bowling team only innings is 1"""

merge_df = total_score_innings_2.merge(total_score_innings_1[['ID','innings','total_run','Bowling Team']],
                                       left_on = 'ID', right_on = 'ID')
merge_df

merge_df = merge_df.rename(columns={
    'innings_x': 'Innings_1',
    'total_run_x': 'Total_Runs_Innings_1',
    'Bowling Team_x': 'Bowling_Team_Innings_1',
    'innings_y': 'Innings_2',
    'total_run_y': 'Total_Runs_Innings_2',
    'Bowling Team_y': 'Bowling_Team_Innings_2'
})

merge_df.info()

"""i am merge on bowling team in frist innings and bowling team in seconed innings and changing the column name"""

df6 = df2.merge(merge_df[['ID','Innings_1','Total_Runs_Innings_1','Bowling_Team_Innings_1',
                          'Innings_2','Total_Runs_Innings_2','Bowling_Team_Innings_2']], left_on = 'ID', right_on = 'ID')
df6.head()

"""marging in merge_df and df2 to crating on stating and finding column name is bowling_team_innings_1 and bowling_team_innings_2"""

bowling_team_innings_1 = df6['Bowling_Team_Innings_1']
bowling_team_innings_2 = df6['Bowling_Team_Innings_2']
df7 = pd.DataFrame({
    'ID': df6['ID'],
    'batting_team_innings_1': np.where(bowling_team_innings_1 == bowling_team_innings_2, bowling_team_innings_1,
                                       bowling_team_innings_2),
    'batting_team_innings_2': np.where(bowling_team_innings_1 == bowling_team_innings_2, bowling_team_innings_2,
                                       bowling_team_innings_1)
})
df7.head()

"""marging in df6 on df7 to marging new column in my main dataframe"""

df8 = df6.merge(df7[['ID','batting_team_innings_1','batting_team_innings_2']],
                left_on = 'ID', right_on = 'ID')
df8.head()

"""arguing the columns"""

columns = ['ID','Season','Date','MatchNumber','Venue','City','Team1','Team2','TossWinner',
           'TossDecision','Innings_1','batting_team_innings_1','Bowling_Team_Innings_1',
           'Total_Runs_Innings_1','Innings_2','batting_team_innings_2','Bowling_Team_Innings_2',
           'Total_Runs_Innings_2', 'WinningTeam',]
df9 = df8[columns]
df9.info()

df10 = df9.copy()
df10['id'] = range(len(df10), 0, -1)

df10 = df10.drop(['ID'], axis=1)

df10['losing_team'] = np.where(df10['WinningTeam'] == df10['Team1'], df10['Team2'], df10['Team1'])

columns = ['id','Season','Date','MatchNumber','Venue','City','Team1','Team2','TossWinner','TossDecision','Innings_1',
           'batting_team_innings_1','Bowling_Team_Innings_1','Total_Runs_Innings_1','Innings_2',
           'batting_team_innings_2','Bowling_Team_Innings_2','Total_Runs_Innings_2', 'WinningTeam','losing_team']
df10 = df10[columns]
df10.head()

df10['Team1'].unique()

df10['Team2'].unique()

df10['WinningTeam'].unique()

df10['City'].unique()

df10['Venue'].unique()

df10['Team1'] = df10['Team1'].str.replace('Delhi Daredevils','Delhi Capitals')
df10['Team1'] = df10['Team1'].str.replace('Deccan Chargers','Sunrisers Hyderabad')
df10['Team1'] = df10['Team1'].str.replace('Punjab Kings','Kings XI Punjab')

df10['Team2'] = df10['Team2'].str.replace('Delhi Daredevils','Delhi Capitals')
df10['Team2'] = df10['Team2'].str.replace('Deccan Chargers','Sunrisers Hyderabad')
df10['Team2'] = df10['Team2'].str.replace('Punjab Kings','Kings XI Punjab')

df10['WinningTeam'] = df10['WinningTeam'].str.replace('Delhi Daredevils','Delhi Capitals')
df10['WinningTeam'] = df10['WinningTeam'].str.replace('Deccan Chargers','Sunrisers Hyderabad')
df10['WinningTeam'] = df10['WinningTeam'].str.replace('Punjab Kings','Kings XI Punjab')
df10['TossWinner'] = df10['TossWinner'].str.replace('Delhi Daredevils','Delhi Capitals')
df10['TossWinner'] = df10['TossWinner'].str.replace('Deccan Chargers','Sunrisers Hyderabad')
df10['TossWinner'] = df10['TossWinner'].str.replace('Punjab Kings','Kings XI Punjab')

df10['losing_team'] = df10['losing_team'].str.replace('Delhi Daredevils','Delhi Capitals')
df10['losing_team'] = df10['losing_team'].str.replace('Deccan Chargers','Sunrisers Hyderabad')
df10['losing_team'] = df10['losing_team'].str.replace('Punjab Kings','Kings XI Punjab')

df10['batting_team_innings_1'] = df10['batting_team_innings_1'].str.replace('Delhi Daredevils','Delhi Capitals')
df10['batting_team_innings_1'] = df10['batting_team_innings_1'].str.replace('Deccan Chargers','Sunrisers Hyderabad')
df10['batting_team_innings_1'] = df10['batting_team_innings_1'].str.replace('Punjab Kings','Kings XI Punjab')

df10['Bowling_Team_Innings_1'] = df10['Bowling_Team_Innings_1'].str.replace('Delhi Daredevils','Delhi Capitals')
df10['Bowling_Team_Innings_1'] = df10['Bowling_Team_Innings_1'].str.replace('Deccan Chargers','Sunrisers Hyderabad')
df10['Bowling_Team_Innings_1'] = df10['Bowling_Team_Innings_1'].str.replace('Punjab Kings','Kings XI Punjab')

df10['batting_team_innings_2'] = df10['batting_team_innings_2'].str.replace('Delhi Daredevils','Delhi Capitals')
df10['batting_team_innings_2'] = df10['batting_team_innings_2'].str.replace('Deccan Chargers','Sunrisers Hyderabad')
df10['batting_team_innings_2'] = df10['batting_team_innings_2'].str.replace('Punjab Kings','Kings XI Punjab')

df10['Bowling_Team_Innings_2'] = df10['Bowling_Team_Innings_2'].str.replace('Delhi Daredevils','Delhi Capitals')
df10['Bowling_Team_Innings_2'] = df10['Bowling_Team_Innings_2'].str.replace('Delhi Daredevils','Delhi Capitals')
df10['Bowling_Team_Innings_2'] = df10['Bowling_Team_Innings_2'].str.replace('Deccan Chargers','Sunrisers Hyderabad')
df10['Bowling_Team_Innings_2'] = df10['Bowling_Team_Innings_2'].str.replace('Punjab Kings','Kings XI Punjab')

df10.info()

import matplotlib.pyplot as plt
import seaborn as sns
import warnings
warnings.filterwarnings('ignore')

df10.head()

total_match_in_season = df10['Season'].value_counts().plot.bar()
total_match_in_season.set_xlabel('Season')
total_match_in_season.set_ylabel('Total Matches')
total_match_in_season.set_title('Seasons by Total Matches')
plt.show()

top_cities = df10['City'].value_counts().head(5)
df_top_cities = df10[df10['City'].isin(top_cities.index)]
plt.figure(figsize=(12, 6))
sns.countplot(x='City', data=df_top_cities, order=top_cities.index, palette='viridis')
plt.xlabel('City')
plt.ylabel('macthes play')
plt.title('Top 5 City hight macthes play Across Seasons')
plt.xticks(rotation=45, ha='right')
plt.show()

top_venues = df10['Venue'].value_counts().head(5)
df_top_venues = df10[df10['Venue'].isin(top_venues.index)]

plt.figure(figsize=(12, 6))
sns.countplot(x='Venue', data=df_top_venues, order=top_venues.index, palette='muted')
plt.xlabel('Venue')
plt.ylabel('Frequency')
plt.title('Top 10 Venue Distribution Across Seasons')
plt.xticks(rotation=45, ha='right')
plt.show()

sns.set_theme(style='whitegrid')
plt.figure(figsize=(10, 6))
sns.countplot(x="Season", hue="WinningTeam", data=df10, palette='viridis', edgecolor='w')

# Set labels and title
plt.xlabel('Season')
plt.ylabel('Count')
plt.title('Count of Winning Teams in Each Season')

# Show the plot
plt.legend(title='Winning Team', bbox_to_anchor=(1.05, 1), loc='upper left')
plt.show()

rajasthan_matches = df10[df10['WinningTeam'] == 'Rajasthan Royals']
sns.set_theme(style='whitegrid')
plt.figure(figsize=(10, 6))
sns.countplot(x="Season", data=rajasthan_matches, palette='viridis', edgecolor='w')
plt.xlabel('Season')
plt.ylabel('Count')
plt.title('Count of Matches Win by Rajasthan Royals in Each Season')
plt.show()

top_Winning_Team = df10['WinningTeam'].value_counts()
df_top_Winning_Team = df10[df10['WinningTeam'].isin(top_Winning_Team.index)]
plt.figure(figsize=(10, 5))
sns.countplot(x='WinningTeam', data=df_top_Winning_Team, order=top_Winning_Team.index, palette='viridis')

plt.xlabel('Winning Team')
plt.ylabel('matches win')
plt.title('most matches Winning Team Across Seasons')

plt.xticks(rotation=45, ha='right')
plt.show()

top_Losing_Team = df10['losing_team'].value_counts()
df_top_Losing_Team = df10[df10['losing_team'].isin(top_Losing_Team.index)]

plt.figure(figsize=(12, 6))
sns.countplot(x='losing_team', data=df_top_Losing_Team, order=top_Losing_Team.index, palette='magma')

plt.xlabel('Team')
plt.ylabel('Matches Lost')
plt.title('Matches Lost Distribution Across Seasons')

plt.xticks(rotation=45, ha='right')
plt.show()

team_counts = pd.concat([df10['WinningTeam'].value_counts(),
                         df10['losing_team'].value_counts()], axis=1, keys=['Wins', 'Losses'])
team_counts['Total'] = team_counts.sum(axis=1)
team_counts = team_counts.sort_values(by='Total', ascending=False)
plt.figure(figsize=(25, 15))
team_counts[['Wins', 'Losses']].plot(kind='bar', color=['green', 'red'], width=0.8)
plt.xlabel('Team')
plt.ylabel('Matches')
plt.title('Team-wise Match Distribution (Wins and Losses)')
plt.xticks(rotation=45, ha='right')
plt.legend(title='Outcome', loc='upper right')
plt.show()

team_counts = df10.groupby('batting_team_innings_1')['Total_Runs_Innings_1'].sum().reset_index()
team_counts = team_counts.sort_values(by='Total_Runs_Innings_1', ascending=False)
plot_color = 'red'
plt.figure(figsize=(12, 6))
plt.plot(team_counts['batting_team_innings_1'], team_counts['Total_Runs_Innings_1'], color=plot_color)
# plt.fill_between(x=team_counts['batting_team_innings_1'], y1=team_counts['Total_Runs_Innings_1'],
#                  color=plot_color, alpha=0.3)
plt.xlabel('Team')
plt.ylabel('Total Runs')
plt.title('Team score Runs Total Runs frist inning Across Seasons')

plt.xticks(rotation=90, ha='right')
plt.show()

team_counts = df10.groupby('batting_team_innings_2')['Total_Runs_Innings_2'].sum().reset_index()
team_counts = team_counts.sort_values(by='Total_Runs_Innings_2', ascending=False)
plot_color = 'purple'
plt.figure(figsize=(12, 6))
plt.plot(team_counts['batting_team_innings_2'], team_counts['Total_Runs_Innings_2'], color=plot_color)
# plt.fill_between(x=team_counts['batting_team_innings_1'], y1=team_counts['Total_Runs_Innings_1'],
#                  color=plot_color, alpha=0.3)
plt.xlabel('Team')
plt.ylabel('Total Runs')
plt.title('Team score Total Runs on seconed inning on Across Seasons')

plt.xticks(rotation=90, ha='right')
plt.show()

top_TossDecision = df10['TossDecision'].value_counts()
df_top_TossDecision = df10[df10['TossDecision'].isin(top_TossDecision.index)]

plt.figure(figsize=(12, 6))
plt.pie(top_TossDecision, labels=top_TossDecision.index, autopct='%1.1f%%',
        startangle=90, colors=sns.color_palette('viridis'))
plt.axis('equal')
plt.title('Toss Decision on Across Seasons')
plt.show()

rcb_toss_data = df10[df10['TossWinner'] == 'Royal Challengers Bangalore']
toss_decision_counts = rcb_toss_data['TossDecision'].value_counts()

plt.figure(figsize=(12, 6))
plt.pie(toss_decision_counts, labels=toss_decision_counts.index, autopct='%1.1f%%',
        startangle=90, colors=sns.color_palette('Set2'))
plt.axis('equal')
plt.title('Toss Decision for RCB Across Seasons')
plt.show()

srh_toss_data = df10[(df10['TossWinner'] == 'Mumbai Indians') & (df10['WinningTeam'] == 'Mumbai Indians')]
toss_decision_counts = srh_toss_data['TossDecision'].value_counts()
plt.figure(figsize=(10, 6))
sns.barplot(x=toss_decision_counts.index, y=toss_decision_counts, palette='viridis')
plt.xlabel('Toss Decision')
plt.ylabel('matches')
plt.title('Toss Decision for Mumbai Indians to win matches')
plt.xticks(rotation=45, ha='right')
plt.show()

srh_toss_data = df10[(df10['TossWinner'] == 'Mumbai Indians') & (df10['losing_team'] == 'Mumbai Indians')]
toss_decision_counts = srh_toss_data['TossDecision'].value_counts()
plt.figure(figsize=(10, 6))
sns.barplot(x=toss_decision_counts.index, y=toss_decision_counts, palette='viridis')
plt.xlabel('Toss Decision')
plt.ylabel('matches')
plt.title('Toss Decision for Mumbai Indians to Loss the matches')
plt.xticks(rotation=45, ha='right')
plt.show()

total_score_df = total_score_df[total_score_df['innings'] == 1]
total_score_df.head()

df11 = df[df['innings'] == 1].groupby('ID')['BattingTeam'].unique().reset_index(name='Bowling Team')
df11['Bowling Team'] = df11['Bowling Team'].apply(lambda x: x[0] if x else None)
df11.dropna(subset=['Bowling Team'], inplace=True)
df11.head()

total_score_df = total_score_df.merge(df11[['ID','Bowling Team']], left_on = 'ID', right_on = 'ID')
total_score_df.head()

df = df.merge(total_score_df[['ID', 'Bowling Team']], on='ID')
df.head()

match_df = df1.merge(total_score_df[['ID','total_run','Bowling Team']], left_on = 'ID', right_on = 'ID')

match_df.head()

match_df['Team1'].unique()

match_df['Team2'].unique()

match_df['Bowling Team'].unique()

teams = [
    'Sunrisers Hyderabad',
    'Mumbai Indians',
    'Royal Challengers Bangalore',
    'Kolkata Knight Riders',
    'Kings XI Punjab',
    'Chennai Super Kings',
    'Rajasthan Royals',
    'Delhi Capitals',
    'Gujarat Titans',
    'Lucknow Super Giants'
]

match_df['Team1'] = match_df['Team1'].str.replace('Delhi Daredevils','Delhi Capitals')
match_df['Team2'] = match_df['Team2'].str.replace('Delhi Daredevils','Delhi Capitals')
match_df['Bowling Team'] = match_df['Bowling Team'].str.replace('Delhi Daredevils','Delhi Capitals')

match_df['Team1'] = match_df['Team1'].str.replace('Deccan Chargers','Sunrisers Hyderabad')
match_df['Team2'] = match_df['Team2'].str.replace('Deccan Chargers','Sunrisers Hyderabad')
match_df['Bowling Team'] = match_df['Bowling Team'].str.replace('Deccan Chargers','Sunrisers Hyderabad')

match_df['Team1'] = match_df['Team1'].str.replace('Punjab Kings','Kings XI Punjab')
match_df['Team2'] = match_df['Team2'].str.replace('Punjab Kings','Kings XI Punjab')
match_df['Bowling Team'] = match_df['Bowling Team'].str.replace('Punjab Kings','Kings XI Punjab')

match_df = match_df[match_df['Team1'].isin(teams)]
match_df = match_df[match_df['Team2'].isin(teams)]
match_df = match_df[match_df['Bowling Team'].isin(teams)]

match_df.shape

match_df['method'].unique()

match_df['method'] = match_df['method'].fillna(0).replace({'D/L': 1})
match_df['method'] = match_df['method'].astype(int)

match_df = match_df[match_df['method'] == 0]

match_df1 = match_df[['ID','City','WinningTeam','total_run','Bowling Team']]
match_df1.head()

df12 = match_df1.merge(df,on='ID')

df12 = df12[df12['innings'] == 2]

df12.head()

df12['total_run_y'] = pd.to_numeric(df12['total_run_y'], errors='coerce')
df12['current_score'] = df12.groupby('ID')['total_run_y'].cumsum()
df12['runs_left'] = df12['total_run_x'] - df12['current_score']
df12['balls_left'] = 120 - (df12['overs'] * 6 + df12['ballnumber'])
df12.head()

df12['player_out'] = df12['player_out'].replace([np.inf, -np.inf], np.nan).fillna(0)
df12['player_out'] = pd.to_numeric(df12['player_out'], errors='coerce')
df12['player_out'] = df12['player_out'].replace([np.inf, -np.inf, np.nan], -1)
df12['player_out'] = df12['player_out'].astype(int)
df12['player_out'] = df12['player_out'].apply(lambda x: 1 if x != 0 else 0)
df12['wickets'] = df12.groupby('ID')['player_out'].cumsum()
df12['wickets_left'] = 10 - df12['wickets']
df12.head()

"""we have predicted some winning team prediction with accuracy of"""



df12['crr'] = (df12['current_score']*6)/(120 - df12['balls_left'])
df12['rrr'] = (df12['runs_left']*6)/df12['balls_left']

def result(row):
    return 1 if row['BattingTeam'] == row['WinningTeam'] else 0

df12['result'] = df12.apply(result,axis=1)

final_df = df12[['BattingTeam','Bowling Team_x','City','runs_left','balls_left',
                 'wickets_left','total_run_x','crr','rrr','result']]

final_df.head()

final_df = final_df.sample(final_df.shape[0])

final_df.sample()

final_df.dropna(inplace=True)

final_df = final_df[final_df['balls_left'] != 0]

X = final_df.iloc[:,:-1]
y = final_df.iloc[:,-1]
from sklearn.model_selection import train_test_split
X_train,X_test,y_train,y_test = train_test_split(X,y,test_size=0.2,random_state=1)

from sklearn.compose import ColumnTransformer
from sklearn.preprocessing import OneHotEncoder

trf = ColumnTransformer([
    ('trf',OneHotEncoder(sparse=False,drop='first'),['BattingTeam','Bowling Team_x','City'])
]
,remainder='passthrough')

from sklearn.linear_model import LogisticRegression
from sklearn.pipeline import Pipeline

pipe = Pipeline(steps=[
    ('step1',trf),
    ('step2',LogisticRegression(solver='liblinear'))
])

pipe.fit(X_train,y_train)

y_pred = pipe.predict(X_test)

from sklearn.metrics import accuracy_score
accuracy_score(y_test,y_pred)

"""from logistic regression we predicted that gujarat titans has a chance to win upto 81%"""



pipe.predict_proba(X_test)[10]

#pipe = Pipeline(steps=[('step1',trf),('step2',RandomForestClassifier())])

def match_summary(row):
    print("BattingTeam-" + row['BattingTeam'] + " | Bowling Team_x-" + row['Bowling Team_x'] + " | Target- " + str(row['total_run_x']))

def match_progression(x_df, match_id, pipe):
    df2 = x_df[x_df['ID'] == match_id]
    df2 = df2[(df2['ballnumber'] == 6)]

    temp_df = df2[['BattingTeam', 'Bowling Team_x', 'City', 'runs_left', 'balls_left', 'wickets_left', 'total_run_x', 'crr', 'rrr']].dropna()
    temp_df = temp_df[temp_df['balls_left'] != 0]

    result = pipe.predict_proba(temp_df)

    temp_df['lose'] = np.round(result.T[0] * 100, 1)
    temp_df['win'] = np.round(result.T[1] * 100, 1)
    temp_df['end_of_over'] = range(1, temp_df.shape[0] + 1)

    target = temp_df['total_run_x'].values[0]

    runs = list(temp_df['runs_left'].values)
    new_runs = runs[:]
    runs.insert(0, target)
    temp_df['runs_after_over'] = np.array(runs)[:-1] - np.array(new_runs)

    wickets = list(temp_df['wickets_left'].values)
    new_wickets = wickets[:]
    new_wickets.insert(0, 10)
    wickets.append(0)
    w = np.array(wickets)
    nw = np.array(new_wickets)
    temp_df['wickets_in_over'] = (nw - w)[0:temp_df.shape[0]]

    print("Target-", target)

    temp_df = temp_df[['end_of_over', 'runs_after_over', 'wickets_in_over', 'lose', 'win']]

    return temp_df, target

temp_df,target = match_progression(df12,1254108	,pipe)
temp_df

import matplotlib.pyplot as plt
plt.figure(figsize=(18,8))
plt.plot(temp_df['end_of_over'],temp_df['wickets_in_over'],color='yellow',linewidth=3)
plt.plot(temp_df['end_of_over'],temp_df['win'],color='#00a65a',linewidth=4)
plt.plot(temp_df['end_of_over'],temp_df['lose'],color='red',linewidth=4)
plt.bar(temp_df['end_of_over'],temp_df['runs_after_over'])
plt.title('Target-' + str(target))